#!/usr/bin/env ruby

require 'pry'
require 'date'

module Harvest
  ProjectAssignment = Struct.new(
    :id,
    :is_project_manager,
    :is_active,
    :use_default_rates,
    :budget,
    :created_at,
    :updated_at,
    :hourly_rate,
    :project,
    :client,
    :task_assignments,
    keyword_init: true
  )

  Project = Struct.new(
    :bill_by,
    :budget,
    :budget_by,
    :budget_is_monthly,
    :client,
    :code,
    :cost_budget,
    :cost_budget_include_expenses,
    :created_at,
    :ends_on,
    :fee,
    :hourly_rate,
    :id,
    :is_active,
    :is_billable,
    :is_fixed_fee,
    :name,
    :notes,
    :notify_when_over_budget,
    :over_budget_notification_date,
    :over_budget_notification_percentage,
    :show_budget_to_all,
    :starts_on,
    :updated_at,
    :task_assignments,
    keyword_init: true
  )

  TaskAssignment = Struct.new(
    :id,
    :billable,
    :is_active,
    :created_at,
    :updated_at,
    :hourly_rate,
    :budget,
    :task,
    keyword_init: true
  )

  Task = Struct.new(
    :id,
    :name,
    :billable_by_default,
    :default_hourly_rate,
    :is_default,
    :is_active,
    :created_at,
    :updated_at,
    keyword_init: true
  )

  ResourceClient = Struct.new(
    :id,
    :name,
    :is_active,
    :address,
    :statement_key,
    :currency,
    :created_at,
    :updated_at,
    keyword_init: true
  )

  # Conversion for hash to Struct including nested items.
  class ResourceFactory
    def project_assignment(data)
      d = Harvest::ProjectAssignment.new(data)
      d.project = project(d.project)
      d.task_assignments = d.task_assignments.map { |ta| task_assignment(ta) }
      d.client = client(d.client)
      convert_dates(d)
    end

    def project(data)
      d = Harvest::Project.new(data)
      convert_dates(d)
    end

    def client(data)
      d = Harvest::ResourceClient(data)
      convert_dates(d)
    end

    def task_assignment(data)
      d = Harvest::TaskAssignment.new(data)
      d.task = task(d.task)
      convert_dates(d)
    end

    def task(data)
      d = Harvest::Task.new(data)
      d
    end

    def convert_dates(data)
      data.created_at = DateTime.strptime(data.created_at) unless data.created_at.nil?
      data.updated_at = DateTime.strptime(data.updated_at) unless data.updated_at.nil?
      data
    end
  end
end

project_assignment = {
  'id' => 123_456_789,
  'is_project_manager' => false,
  'is_active' => true,
  'use_default_rates' => true,
  'budget' => nil,
  'created_at' => '2020-08-14T22:32:40Z',
  'updated_at' => '2020-08-14T22:32:40Z',
  'hourly_rate' => nil,
  'project' => { 'id' => 12_345_678, 'name' => 'Customer Name', 'code' => '16393' },
  'client' => { 'id' => 1_234_567, 'name' => 'Customer Name', 'currency' => 'USD' },
  'task_assignments' => [
    { 'id' => 987_654_321, 'billable' => false, 'is_active' => true, 'created_at' => '2020-08-14T22:32:40Z', 'updated_at' => '2020-08-14T22:32:40Z', 'hourly_rate' => nil, 'budget' => nil, 'task' => { 'id' => 11299508, 'name' => 'Non-Billable - MGMT' } },
    { 'id' => 456_789_123, 'billable' => true, 'is_active' => true, 'created_at' => '2020-08-14T22:32:40Z', 'updated_at' => '2020-08-14T22:32:57Z', 'hourly_rate' => nil, 'budget' => 50.0, 'task' => { 'id' => 11585229, 'name' => 'Teams' } }
  ]
}

# TODO: How do I refactor this so it does these actions in one fell swoop?
# Is it at this point that a class is a better idea? 
# At what point are there too many arguments being passed to a class/Struct?
# https://rubystyle.guide/#too-many-params
# How do you resolve this sort of issue?
factory = Harvest::ResourceFactory.new

pa = factory.project_assignment(project_assignment)

binding.pry
