#!/usr/bin/env ruby

require 'pry'
require 'date'

def hash_to_struct(hash, struct)
  struct.new(*hash.values_at(*struct.members))
end

def convert_to_sym(data)
  return data.map { |k, v| [k.to_sym, convert_to_sym(v)] }.to_h if data.respond_to?('keys')

  return data.map { |v| convert_to_sym(v) } if data.respond_to?('each')

  data
end

module Harvest
  ProjectAssignment = Struct.new(
    :id,
    :is_project_manager,
    :is_active,
    :use_default_rates,
    :budget,
    :created_at,
    :updated_at,
    :hourly_rate,
    :project,
    :client,
    :task_assignments,
    keyword_init: true
  ) do
  end

  Project = Struct.new(
    :bill_by,
    :budget,
    :budget_by,
    :budget_is_monthly,
    :client,
    :code,
    :cost_budget,
    :cost_budget_include_expenses,
    :created_at,
    :ends_on,
    :fee,
    :hourly_rate,
    :id,
    :is_active,
    :is_billable,
    :is_fixed_fee,
    :name,
    :notes,
    :notify_when_over_budget,
    :over_budget_notification_date,
    :over_budget_notification_percentage,
    :show_budget_to_all,
    :starts_on,
    :updated_at,
    :task_assignments,
    keyword_init: true
  ) do
  end

  TaskAssignment = Struct.new(
    :id,
    :billable,
    :is_active,
    :created_at,
    :updated_at,
    :hourly_rate,
    :budget,
    :task,
    keyword_init: true
  ) do
  end

  Task = Struct.new(
    :id,
    :name,
    :billable_by_default,
    :default_hourly_rate,
    :is_default,
    :is_active,
    :created_at,
    :updated_at,
    keyword_init: true

  ) do
  end

  ResourceClient = Struct.new(
    :id,
    :name,
    :is_active,
    :address,
    :statement_key,
    :currency,
    :created_at,
    :updated_at,
    keyword_init: true

  ) do
  end
end

project_assignment = convert_to_sym({
  'id' => 123_456_789,
  'is_project_manager' => false,
  'is_active' => true,
  'use_default_rates' => true,
  'budget' => nil,
  'created_at' => '2020-08-14T22:32:40Z',
  'updated_at' => '2020-08-14T22:32:40Z',
  'hourly_rate' => nil,
  'project' => { 'id' => 12_345_678, 'name' => 'Domino Data Lab Inc. - Managed', 'code' => '16393' },
  'client' => { 'id' => 1_234_567, 'name' => 'Domino Data Lab Inc.', 'currency' => 'USD' },
  'task_assignments' => [
    { 'id' => 987_654_321, 'billable' => false, 'is_active' => true, 'created_at' => '2020-08-14T22:32:40Z', 'updated_at' => '2020-08-14T22:32:40Z', 'hourly_rate' => nil, 'budget' => nil, 'task' => { 'id' => 11299508, 'name' => 'Non-Billable - MGMT' } },
    { 'id' => 456_789_123, 'billable' => true, 'is_active' => true, 'created_at' => '2020-08-14T22:32:40Z', 'updated_at' => '2020-08-14T22:32:57Z', 'hourly_rate' => nil, 'budget' => 50.0, 'task' => { 'id' => 11585229, 'name' => 'Teams' } }
  ]
})

# TODO: How do I refactor this so it does these actions in one fell swoop?
# Is it at this point that a class is a better idea? 
# At what point are there too many arguments being passed to a class/Struct?
# https://rubystyle.guide/#too-many-params
# How do you resolve this sort of issue?
pa = Harvest::ProjectAssignment.new(project_assignment)
pa.project = Harvest::Project.new(pa.project)
pa.client = Harvest::ResourceClient.new(pa.client) # Had to change because my API Client is `Client`
pa.task_assignments = pa.task_assignments.map { |ta| Harvest::TaskAssignment.new(ta) }
pa.created_at = DateTime.strptime(pa.created_at)
pa.updated_at = DateTime.strptime(pa.updated_at)

binding.pry

